<?php

namespace RavenDB\Documents\Session;

use Closure;
use RavenDB\Documents\Queries\Facets\AggregationDocumentQueryInterface;
use RavenDB\Documents\Queries\Facets\FacetBase;
use RavenDB\Documents\Queries\GroupBy;
use RavenDB\Documents\Queries\Highlighting\HighlightingOptions;
use RavenDB\Documents\Queries\Highlighting\Highlightings;
use RavenDB\Documents\Queries\QueryResult;
use RavenDB\Documents\Queries\SearchOperator;
use RavenDB\Documents\Queries\Timings\QueryTimings;
use RavenDB\Type\Collection;
use RavenDB\Type\Duration;

interface DocumentQueryInterface
    extends DocumentQueryBaseInterface, DocumentQueryBaseSingleInterface, EnumerableQueryInterface
{
    function getIndexName(): ?string;

    function getQueryClass(): ?string;

    /**
     * Whether we should apply distinct operation to the query on the server side
     *
     * @return bool true if server should return distinct results
     */
    function isDistinct(): bool;

    /**
     * Returns the query result. Accessing this property for the first time will execute the query.
     *
     * @return QueryResult query result
     */
    function getQueryResult(): QueryResult;

    /**
     * selectFields(string $projectionClass, ?ProjectionBehavior $projectionBehavior = null): DocumentQueryInterface
     *
     * selectFields(string $field, ProjectionBehavior $projectionBehavior = null): DocumentQueryInterface
     *
     * selectFields(array $fields, ?string $projectionClass = null, ProjectionBehavior $projectionBehavior = null): DocumentQueryInterface
     * selectFields(StringArray $fields, ?string $projectionClass = null, ProjectionBehavior $projectionBehavior = null): DocumentQueryInterface
     *
     * selectFields(QueryData $queryData, ?string $projectionClass = null): DocumentQueryInterface
     *
     * @param mixed ...$params
     *
     * @return DocumentQueryInterface
     */
    public function selectFields(...$params): DocumentQueryInterface;

//    /**
//     * Selects a Time Series Aggregation based on
//     * a time series query generated by an ITimeSeriesQueryBuilder.
//     * @param clazz Result class
//     * @param timeSeriesQuery query provider
//     * @param <TTimeSeries> Result class
//     * @return Document query
//     */
//    <TTimeSeries> IDocumentQuery<TTimeSeries> selectTimeSeries(Class<TTimeSeries> clazz, Consumer<ITimeSeriesQueryBuilder> timeSeriesQuery);

    /**
     * Changes the return type of the query
     * @param string $resultClass class of result
     *
     * @return DocumentQueryInterface Document query
     */
    function ofType(string $resultClass): DocumentQueryInterface;

    /**
     * @param string|GroupBy $fieldName
     * @param string|GroupBy ...$fieldNames
     *
     * @return GroupByDocumentQueryInterface
     */
    public function groupBy($fieldName, ...$fieldNames): GroupByDocumentQueryInterface;

//    IDocumentQuery<T> moreLikeThis(Consumer<IMoreLikeThisBuilderForDocumentQuery<T>> builder);

    /**
     * @param Callable|FacetBase $builderOrFacets
     *
     * @return AggregationDocumentQueryInterface
     */
    public function aggregateBy(...$builderOrFacets): AggregationDocumentQueryInterface;

    public function aggregateUsing(?string $facetSetupDocumentId): AggregationDocumentQueryInterface;

//    ISuggestionDocumentQuery<T> suggestUsing(SuggestionBase suggestion);
//
//    ISuggestionDocumentQuery<T> suggestUsing(Consumer<ISuggestionBuilder<T>> builder);


    public function toString(bool $compatibilityMode = false): string;


    public function addBeforeQueryExecutedListener(Closure $action): DocumentQueryInterface;
    public function removeBeforeQueryExecutedListener(Closure $action): DocumentQueryInterface;
    public function addAfterQueryExecutedListener(Closure $action): DocumentQueryInterface;
    public function removeAfterQueryExecutedListener(Closure $action): DocumentQueryInterface;
    public function addAfterStreamExecutedListener(Closure $action): DocumentQueryInterface;
    public function removeAfterStreamExecutedListener(Closure $action): DocumentQueryInterface;

    function addParameter(string $name, $value): DocumentQueryInterface;

    function noCaching(): DocumentQueryInterface;
    function noTracking(): DocumentQueryInterface;
    function timings(QueryTimings &$timings): DocumentQueryInterface;
    function statistics(QueryStatistics &$stats): DocumentQueryInterface;
    function skip(int $count): DocumentQueryInterface;
    function take(int $count): DocumentQueryInterface;
    function waitForNonStaleResults(?Duration $waitTimeout = null): DocumentQueryInterface;


    function not(): DocumentQueryInterface;
    public function andAlso(bool $wrapPreviousQueryClauses = false): DocumentQueryInterface;
    function closeSubclause(): DocumentQueryInterface;
    function containsAll(?string $fieldName, Collection $values): DocumentQueryInterface;
    function containsAny(?string $fieldName, Collection $values): DocumentQueryInterface;
    function negateNext(): DocumentQueryInterface;
    function openSubclause(): DocumentQueryInterface;
    public function orElse(): DocumentQueryInterface;
    public function search(string $fieldName, string $searchTerms, ?SearchOperator $operator = null): DocumentQueryInterface;
    function whereLucene(string $fieldName, string $whereClause, bool $exact = false): DocumentQueryInterface;
    function whereBetween(string $fieldName, $start, $end, bool $exact = false): DocumentQueryInterface;
    function whereEndsWith(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereEquals(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereEqualsWithParams(WhereParams $whereParams): DocumentQueryInterface;
    function whereNotEquals(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereNotEqualsWithParams(WhereParams $whereParams): DocumentQueryInterface;
    function whereGreaterThan(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereGreaterThanOrEqual(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereIn(string $fieldName, Collection $values, bool $exact = false): DocumentQueryInterface;
    function whereLessThan(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereLessThanOrEqual(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereStartsWith(string $fieldName, $value, bool $exact = false): DocumentQueryInterface;
    function whereExists(string $fieldName): DocumentQueryInterface;
    function whereRegex(?string $fieldName, ?string $pattern): FilterDocumentQueryBaseInterface;


    function addOrder(?string $fieldName, bool $descending, ?OrderingType $ordering = null): DocumentQueryInterface;
    function boost(float $boost): DocumentQueryInterface;
    function distinct(): DocumentQueryInterface;
    function fuzzy(float $fuzzy): DocumentQueryInterface;
    function highlight(?string $fieldName, int $fragmentLength, int $fragmentCount, ?HighlightingOptions $options , Highlightings &$highlightings): DocumentQueryInterface;
    function include($includes): DocumentQueryInterface;
    function intersect(): DocumentQueryInterface;
    function orderBy(string $field, $sorterNameOrOrdering = null): DocumentQueryInterface;
    function orderByDescending(string $field, $sorterNameOrOrdering = null): DocumentQueryInterface;
    function proximity(int $proximity): DocumentQueryInterface;
    function randomOrdering(?string $seed = null): DocumentQueryInterface;
}
